@using BilheticaAeronauticaWeb.Entities;
@model BilheticaAeronauticaWeb.Models.TicketViewModel


@{
    ViewData["Title"] = "Create";
}
<br />
<h1>Buy ticket</h1>

<hr />
<div class="row">
    <div class="col-md-4 offset-md-4">
        <form asp-controller="ShoppingBaskets" asp-action="CreateShoppingBasketTicket" method="post">
            <input type="hidden" asp-for="FlightId" />
            <div asp-validation-summary="ModelOnly" class="text-danger"></div>
            <div class="form-group">
                <label asp-for="Name" class="control-label"></label>
                <input asp-for="Name" class="form-control" />
                <span asp-validation-for="Name" class="text-danger"></span>
            </div>
            <div class="form-group">
                <label asp-for="Surname" class="control-label"></label>
                <input asp-for="Surname" class="form-control" />
                <span asp-validation-for="Surname" class="text-danger"></span>
            </div>
            <div class="form-group">
                <label asp-for="Class" class="control-label"></label>
                <select asp-for="Class" class="form-control" asp-items="Html.GetEnumSelectList<TicketClass>()" id="ticketClass">
                    <option value="">Select a class</option>
                </select>
                <span asp-validation-for="Class" class="text-danger"></span>
            </div>
            <div class="form-group">
                <label asp-for="SeatId" class="control-label">Seat</label>
                <select asp-for="SeatId" id="SeatId" class="form-control" asp-items="ViewBag.Seats">
                    <option value="">Select a seat</option>
                </select>
                <span asp-validation-for="SeatId" class="text-danger"></span>
            </div>
            <div class="form-group">
                <label asp-for="OriginAirportId" class="control-label"></label>
                <div class="form-control">@ViewBag.Origin</div>
                <span asp-validation-for="OriginAirportId" class="text-danger"></span>
            </div>
            <div class="form-group">
                <label asp-for="DestinationAirportId" class="control-label"></label>
                <div class="form-control">@ViewBag.Destination</div>
                <span asp-validation-for="DestinationAirportId" class="text-danger"></span>
            </div>
            @if (!string.IsNullOrEmpty(ViewBag.Layover))
            {
                <div class="form-group">
                    <label class="label">Layover</label>
                    <div class="form-control">@ViewBag.Layover</div>
                </div>
            }
            <div class="form-group">
                <label asp-for="Price" class="control-label"></label>
                <span class="form-control-plaintext" id="displayPrice">
                    @Model.Price.ToString("0.00")
                </span>
                <input type="hidden" asp-for="Price" id="Price" />
                <input type="hidden" id="basePrice" value="@Model.Price.ToString("0.00")" />
            </div>
            <div class="form-group">
                <label asp-for="Type" class="control-label"></label>
                <select asp-for="Type" class="form-control" asp-items="Html.GetEnumSelectList<PassengerType>()" id="PassengerType">
                    <option value="">Select a type</option>
                </select>
                <span asp-validation-for="Type" class="text-danger"></span>
            </div>
            <div class="form-group">
                <input type="submit" value="Add to basket" class="btn btn-primary" />
            </div>
        </form>
    </div>
</div>

@section Scripts {
    @{
        await Html.RenderPartialAsync("_ValidationScriptsPartial");
    }

<script type="text/javascript">
    $(document).ready(function () {
        function updateSeats() {
            var flightId = $("#FlightId").val();

            if (flightId) {
                $("#SeatId").empty();

                $.ajax({
                    url: '@Url.Action("GetSeatsByFlight", "Tickets")',
                    type: 'POST',
                    dataType: 'json',
                    data: {
                        flightId: flightId,
                    },
                    success: function (seats) {
                        $("#SeatId").append('<option value="">Select a seat</option>');
                        $.each(seats, function (i, seat) {
                            $("#SeatId").append('<option value="' + seat.value + '">' + seat.text + '</option>');

                        });
                    },
                    error: function () {
                        alert("Failed to load seats.");
                    }
                });
            }
        }

            updateSeats();

        $("#FlightId").change(function () {
            updateSeats();
        });
    });
</script>

<script>
    document.addEventListener("DOMContentLoaded", function () {
        const passengerTypeSelect = document.getElementById("PassengerType");
        const seatSelect = document.getElementById("SeatId");

        function toggleSeatSelect() {
            const selectedValue = passengerTypeSelect.options[passengerTypeSelect.selectedIndex].text;
            if (selectedValue.toLowerCase() === "infant") {
                seatSelect.disabled = true;
                seatSelect.value = "";
            } else {
                seatSelect.disabled = false;
            }
        }

        toggleSeatSelect();

        passengerTypeSelect.addEventListener("change", toggleSeatSelect);
    });
</script>

    <script>
        document.addEventListener("DOMContentLoaded", function () {
            const ticketClass = document.getElementById('ticketClass');
            const displayPrice = document.getElementById('displayPrice');
            const priceInput = document.getElementById('Price');
            const basePriceInput = document.getElementById('basePrice');

            if (!ticketClass || !basePriceInput || !priceInput || !displayPrice) {
                console.warn("Some required elements are missing!");
                return;
            }

            ticketClass.addEventListener('change', function () {
                const classValue = this.value;
                const basePrice = parseFloat(basePriceInput.value);
                let finalPrice = basePrice;

                switch (parseInt(classValue)) {
                    case 0:
                        finalPrice = basePrice;
                        break;
                    case 1:
                        finalPrice = basePrice * 1.5;
                        break;
                    default:
                        finalPrice = basePrice;
                        break;
                }

                displayPrice.textContent = finalPrice.toFixed(2);
                priceInput.value = finalPrice.toFixed(2);
            });
        });
    </script>

}